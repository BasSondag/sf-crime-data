var resourcesModule = (function(window,$){    	//Global variables within the module scope	var _resources = {	    "autoCompleteFeatures": null	};	var _options = {	    "apiURL": "https://data.sfgov.org/resource/cuks-n6tp",		"appToken": "W4RBmRyo2ORX3liaMhmwRjMHT"	};	var _lastAutocompleteQueryTime = moment();  	function _init(callback){	    //Initialize the module here		callback.call();	}		    /**      * @param {string} query	  * @param {function} callback    */			function _getIncidentsFromAPI(query, callback){	    var fullURL = _options["apiURL"] + ".geojson" + query; 		$.getJSON(fullURL, callback);	}	    /**      * @param {string} inputBit	  * @param {function} callback    */		function _getAutoSuggestionsFromService(inputBit, callback){        var params = {            api_key: 'search-kz-89WY',            text: inputBit,            'focus.point.lat': 37.76,            'focus.point.lon': -122.43			        };		var timeDifference = moment(_lastAutocompleteQueryTime).diff(moment(), "milliseconds") * -1;				console.log("Time since the last autocomplete rquest: " + timeDifference);				if(timeDifference < 150){		    console.log("You are typing too fast. Blocking requests.");			return false;		}		_lastAutocompleteQueryTime = moment();		        $.getJSON("//search.mapzen.com/v1/autocomplete", params, function(d) {            var response = [];						//Store the latest response from the autocomplete in the module			_resources["autoCompleteFeatures"] = $.extend({}, d.features);			            $.each(d.features, function(key, val) {				response.push({"idx": key, "text": val.properties.label});            });						callback(response);        });			}		function _getLatestAutocompleteFeatures(){	    return _resources["autoCompleteFeatures"];	}	    return {	    init: _init,		getAutoSuggestionsFromService: _getAutoSuggestionsFromService,		getLatestAutocompleteFeatures: _getLatestAutocompleteFeatures,		getIncidentsFromAPI: _getIncidentsFromAPI    }  })(window, jQuery);